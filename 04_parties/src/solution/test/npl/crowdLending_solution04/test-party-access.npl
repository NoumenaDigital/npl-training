package crowdLending_solution04

function getPartyPreferredUsername(party: Party) returns Text -> {
    return party.entity().getOrNone("preferred_username").getOrFail().toList().firstOrNone().getOrFail();
};

@test
function contributeFromMultipleLenders(test: Test) -> {
    var bob = partyOf(
        entityClaims = mapOf(Pair("organization", setOf("noumena")),
                             Pair("preferred_username", setOf("bob"))),
        accessClaims = mapOf(Pair("role", setOf("individual_borrower")))
    );
    var lender = partyOf(
        entityClaims = mapOf(Pair("organization", setOf("noumena"))),
        accessClaims = mapOf(Pair("role", setOf("individual_lender", "institutional_lender")))
    );
    var alice = partyOf(
        entityClaims = mapOf(Pair("organization", setOf("noumena")),
                             Pair("preferred_username", setOf("alice"))),
        accessClaims = mapOf(Pair("role", setOf("individual_lender")))
    );
    var noumenaFinance = partyOf(
        entityClaims = mapOf(Pair("organization", setOf("noumena")),
                             Pair("preferred_username", setOf("noumena_finance"))),
        accessClaims = mapOf(Pair("role", setOf("institutional_lender")))
    );

    var loanRequest = LoanRequest[bob, lender]("Dog hospice", 1000, 60);
    loanRequest.contribute[alice]("Alice", 100);
    loanRequest.contribute[noumenaFinance]("Noumena Finance", 300);

    test.assertEquals(
        2,
        loanRequest.contributions.size(),
        "Two contributions have been made as expected"
    );
};

@test
function verifyOwnershipTransfer(test: Test) -> {
    var bob = partyOf(
        entityClaims = mapOf(Pair("organization", setOf("noumena")),
                             Pair("preferred_username", setOf("bob"))),
        accessClaims = mapOf(Pair("role", setOf("individual_borrower")))
    );
    var lender = partyOf(
        entityClaims = mapOf(Pair("organization", setOf("noumena"))),
        accessClaims = mapOf(Pair("role", setOf("individual_lender", "institutional_lender")))
    );
    var carl = partyOf(
        entityClaims = mapOf(Pair("organization", setOf("noumena")),
                             Pair("preferred_username", setOf("carl"))),
        accessClaims = mapOf(Pair("role", setOf("individual_borrower")))
    );

    var loanRequest = LoanRequest[bob, lender]("Dog hospice", 1000, 60);
    loanRequest.transferBorrower[bob, carl]();

    test.assertFails(
        function() returns Number -> loanRequest.getRemainingAmount[bob](),
        "Since ownership has been transferred, Bob cannot access the loan request anymore"
    );
};

@test
function verifyLoanObserverAccess(test: Test) -> {
    var bob = partyOf(
        entityClaims = mapOf(Pair("organization", setOf("noumena")),
                             Pair("preferred_username", setOf("bob"))),
        accessClaims = mapOf(Pair("role", setOf("individual_borrower")))
    );
    var lender = partyOf(
        entityClaims = mapOf(Pair("organization", setOf("noumena"))),
        accessClaims = mapOf(Pair("role", setOf("individual_lender", "institutional_lender")))
    );
    var alice = partyOf(
        entityClaims = mapOf(Pair("organization", setOf("noumena")),
                             Pair("preferred_username", setOf("alice"))),
        accessClaims = mapOf(Pair("role", setOf("individual_lender")))
    );

    var loanRequest = LoanRequest[bob, lender]("Dog hospice", 1000, 60);
    loanRequest.contribute[alice]("Alice", 1000);
    loanRequest.shareLoanWithLender[bob](getPartyPreferredUsername(alice));

    test.assertEquals(
        0,
        loanRequest.loan.getOrFail().getRepaidAmount[alice](),
        "Alice can get the correct repaid amount from the Loan protocol"
    );
};


@test
function verifyLoanObserverUniqueness(test: Test) -> {
    var bob = partyOf(
        entityClaims = mapOf(
            Pair("organization", setOf("noumena")),
            Pair("preferred_username", setOf("bob"))
        ),
        accessClaims = mapOf(Pair("role", setOf("individual_borrower")))
    );
    var lender = partyOf(
        entityClaims = mapOf(
            Pair("organization", setOf("noumena"))
        ),
        accessClaims = mapOf(Pair("role", setOf("individual_lender", "institutional_lender")))
    );
    var alice = partyOf(
        entityClaims = mapOf(
            Pair("organization", setOf("noumena")),
            Pair("preferred_username", setOf("alice"))
        ),
        accessClaims = mapOf(Pair("role", setOf("individual_lender")))
    );
    var carl = partyOf(
        entityClaims = mapOf(
            Pair("organization", setOf("noumena")),
            Pair("preferred_username", setOf("carl"))
        ),
        accessClaims = mapOf(Pair("role", setOf("individual_lender")))
    );

    var anyone: Party = 'anyone';

    var loanRequest = LoanRequest[bob, lender]("Dog hospice", 1000, 60);
    loanRequest.contribute[alice]("Alice", 1000);
    //loanRequest.shareLoanWithLender[bob](getPartyPreferredUsername(alice));

    // TODO: Why can anyone access the getRepaidAmount function?
    var repaidAmount = loanRequest.loan.getOrFail().getRepaidAmount[anyone]();

    test.assertEquals(
        0,
        repaidAmount,
        "Alice can get the correct repaid amount from the Loan protocol"
    );
};