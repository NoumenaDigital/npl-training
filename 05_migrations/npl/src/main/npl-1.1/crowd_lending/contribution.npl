package crowd_lending

protocol[bankingSystem, borrower, lender] Contribution(
    var amount: CHF,
    var lenderAccountInfo: AccountInformation,
    var registerLoan: Boolean
) {

    initial state created
    state sent
    state accepted
    final state rejected
    final state registered

    var loanRequest: Optional<LoanRequest> = optionalOf<LoanRequest>();

    permission[bankingSystem] registerSending() | created {
        become sent
    }

    permission[bankingSystem] accept(bank: BankInterface) | sent {
        if (this.loanRequest.isPresent()) {
            this.loanRequest.getOrFail().contribute[lender](bank, this);
        } else {
            become accepted
        };
    }

    permission[bankingSystem] reject() | sent {
        become rejected
    }

    permission[lender] register() | sent, accepted {
        become registered
    }

    permission[lender] registerLoanRequest(loanRequest: LoanRequest) {
        this.loanRequest = optionalOf(loanRequest);
    }

    @api
    permission[lender] performSubscribeRequest(bank: BankInterface, loanRequest: LoanRequest) | accepted {
        loanRequest.contribute[lender](bank, this);
    }

    @api
    permission[lender] cancelContribution(bank: BankInterface, loanRequest: LoanRequest) | accepted, rejected {
        loanRequest.cancelContribution[lender](this, bank);
    }
}
