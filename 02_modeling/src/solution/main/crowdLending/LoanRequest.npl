package crowdLending

struct Contribution {
    username: Text,
    amount: Number
};

function getContributionAmount(contribution: Contribution) returns Number -> {
    return contribution.amount;
};

protocol[borrower, lender] LoanRequest(var topic: Text, var loanTotalAmount: Number, var loanRepaymentTimeline_Days: Number) {
    initial state created
    state inContribution
    final state fulfilled

    var contributions: List<Contribution> = listOf<Contribution>();
    var loan: Optional<Loan> = optionalOf<Loan>();

    function calculateRemainingAmount() returns Number -> {
        var totalContributions = contributions.map(getContributionAmount).sum();
        return loanTotalAmount - totalContributions;
    }

    permission[borrower] getRemainingAmount() returns Number {
        return calculateRemainingAmount();
    }

    permission[lender] contribute(username: Text, contributionAmount: Number) | created, inContribution {
        require(contributionAmount > 0, "Contribution amount must be positive");

        var newContribution = Contribution(username, contributionAmount);
        contributions = contributions.with(newContribution);

        if(calculateRemainingAmount() <= 0) {
            var newLoan = Loan[borrower](this);
            loan = optionalOf<Loan>(newLoan);
            become fulfilled
        }
        else {
            become inContribution
        };
    };
};
