package crowd_lending

@test
function flow(test: Test) -> {
    var jean = getJean();
    var alem = getAlem();
    var daniel = getDaniel();
    var bankingSystem = getBankingSystem();

    var cbi = BankInterface[bankingSystem]();

    var jeanAccount = Account[jean](AccountInformation("jean"));
    var alemAccount = Account[alem](AccountInformation("alem"));
    var danielAccount = Account[daniel](AccountInformation("daniel"));

    var topic = "Buy supplies for Noumena Cake Sale";
    var period = years(1);
    var interests = 0.04;

    test.assertFails(function() returns LoanRequest -> jeanAccount.createOpenLoanRequest[alem](topic, 9, period, interests));
    var loanRequest = jeanAccount.createOpenLoanRequest[jean](topic, 9, period, interests);

    subscribe(cbi, daniel, bankingSystem, loanRequest, danielAccount, 6, true);
    subscribe(cbi, alem, bankingSystem, loanRequest, alemAccount, 3, true);

    test.assertEquals(CHF(0), loanRequest.remainder);

    var alemLoans = loanRequest.loans.filter(function(l: Loan) returns Boolean -> l.loanConditions.amount == CHF(3));
    test.assertEquals(1, alemLoans.size(), "alem loans");
    for(l in alemLoans) {
        alemAccount.registerLoan[alem](l);
    };

    test.assertEquals(loanRequest.states.granted, loanRequest.currentState);
    test.assertEquals(2, loanRequest.loans.size(), "loan request");
    test.assertEquals(1, alemAccount.loans.size(), "alem");

    /* TODO implement ownership check
    for(l in loanRequest.loans.filter(function(l: Loan) returns Boolean -> l.loanConditions.amount == CHF(6))) {
        test.assertFails(function() returns Unit -> alemAccount.registerLoan[alem](l), "registration of someone else's account");
    };
    */
};

@test
function flowCommunity(test: Test) -> {
    var jean = getJean();
    var daniel = getDaniel();
    var bankingSystem = getBankingSystem();

    var cbi = BankInterface[bankingSystem]();

    var jeanAccount = Account[jean](AccountInformation("jean"));
    var danielAccount = Account[daniel](AccountInformation("daniel"));

    var topic = "Buy supplies for Noumena Cake Sale";
    var period = years(1);
    var interests = 0.04;

    var loanRequest = jeanAccount.createLoanRequest[jean](topic, 9, period, interests, mapOf(Pair("department", setOf("Something"))));

    var autoRegister = true;
    subscribe(cbi, daniel, bankingSystem, loanRequest, danielAccount, 9, autoRegister);

    var loans = loanRequest.loans;

    for(l in loanRequest.loans.filter(function(l: Loan) returns Boolean -> l.loanConditions.amount == CHF(9))) {
        danielAccount.registerLoan[daniel](l);
    };

    var initialTransactions = loans.map(function(l: Loan) returns Transfer -> l.transactions
        .filter(function(t: Transfer) returns Boolean -> t.states.sent == t.currentState)
        .get(0));

    test.assertEquals(loanRequest.states.granted, loanRequest.currentState);
    test.assertEquals(1, loanRequest.loans.size());
    test.assertEquals(1, danielAccount.loans.size());

    var loan = loanRequest.loans.get(0);
    test.assertEquals(loan.states.draft, loan.currentState);

    test.assertEquals(1, initialTransactions.size());

    var initialTransaction = initialTransactions.get(0);

    cbi.performTransfer[bankingSystem](NotifySuccess<Pair<Boolean, Transfer>>(Pair(true, initialTransaction)));

    if (!autoRegister) {
        initialTransaction.validateLoan[jean](loan);
    };

    test.assertEquals(loan.states.active, loan.currentState);
};

@test
function selfContribute(test: Test) -> {
    var jean = getJean();
    var bankingSystem = getBankingSystem();

    var cbi = BankInterface[bankingSystem]();

    var jeanAccount = Account[jean](AccountInformation("jean"));

    var topic = "Buy supplies for Noumena Cake Sale";
    var period = years(1);
    var interests = 0.04;

    var loanRequest = jeanAccount.createLoanRequest[jean](topic, 9, period, interests, mapOf(Pair("department", setOf("Something"))));

    test.assertFails(function() returns Unit -> subscribe(cbi, jean, bankingSystem, loanRequest, jeanAccount, 3, true));
};

function subscribe(cbi: BankInterface, lender: Party, system: Party, loanRequest: LoanRequest, lenderAccount: Account, amount: Number, autoRegister: Boolean) -> {
    var contribution = lenderAccount.contributeToLendingRequest[lender](cbi, loanRequest, amount, autoRegister);
    cbi.performContributionRequest[system]( // Mimick notification response
        NotifySuccess<Pair<Boolean, Contribution>>(Pair(true, contribution))
    );
    if (!autoRegister) {
        contribution.performSubscribeRequest[lender](cbi, loanRequest);
    };
};